PRIORITY QUEUE PROGRAM
#include<stdio.h>
int n;
int array_insert(int *a,int i,int x){
   n++;
    for(int j=n-1;j>i;j--){
        (a+j)=(a+j-1);
    }
    *(a+i)=x;
}
int enqueue(int* a,int x){
    int i=0;
    
    printf("\n");
    while((i<n)&&(x>=*(a+i))){
        i++;
    }
    array_insert(a,i,x);
}
int dequeue(int* a)
{
    int x;
    x=*(a+0);
    for(int i=0;i<n;i++)
    {
        (a+i) = (a+i+1);
    }
    n--;
    return x;

}

int main(){
    int x;
    int a[100]={1,3,5,7,10,15};
    n=6;
    enqueue(a,4);
    enqueue(a,6);
    enqueue(a,2);
    enqueue(a,3);
    enqueue(a,8);
    int del=dequeue(a);


    for(int i=0;i<n;i++){
        printf("%d ",*(a+i));
    }

    return 0;
}



FUNCTIONS QUEUE

#include <stdio.h>
#include <stdlib.h>
#define MaxQUEUE 3
#define TRUE 1
#define FALSE 0
struct Queue
{
 int items[MaxQUEUE];
 int rare;
 int front;
};
//struct Queue Q;
void Initialize(struct Queue *Q)
{
    Q->rare = -1;
    Q->front = 0;
}
int IsEmpty(struct Queue *Q) 
{
if (Q->rare - Q->front + 1 == 0)
return TRUE;
else
return FALSE;
}

 int EnQUEUE (struct Queue *Q , int x)
{
    if( Q->rare == MaxQUEUE-1 )
    {
        printf("Queue overflows");
        exit(1);
    }
    Q->rare = Q->rare + 1;
    Q->items[Q->rare]=x;

}
int DeQUEUE(struct Queue *Q)
{
    int x;
     if (IsEmpty(*&Q))
     {
        printf("Queue underflows");
        exit(1);
     }
     x = Q->items[Q->front];
     Q->front = Q->front + 1;
     return x;
      
}

int main()
{
  struct Queue Q;
  Initialize(&Q);
  //EnQUEUE(&Q,k);
  EnQUEUE(&Q,200);
  EnQUEUE(&Q,300);
  EnQUEUE(&Q,400);
  
  int x = DeQUEUE(&Q);
  int y = DeQUEUE(&Q);
  int z = DeQUEUE(&Q);
  /*int i = DeQUEUE();
  int j = DeQUEUE();
  int k = DeQUEUE();
  */
  printf("%d\n",x);
  printf("%d\n",y);
  printf("%d\n",z);
 /* printf("%d\n",i);
  printf("%d\n",j);
  printf("%d\n",k);
  */
  int k;
  scanf("%d",&k);
  int u ;
  scanf("%d" , &u);
  if(u == 1)
  {
    EnQUEUE(&Q,k);
  }
  else
  {
    DeQUEUE(&Q);
  }
  return 0;
} 


CIRCULAR QUEUE

#include <stdio.h>
#include <stdlib.h>
#define MaxQUEUE 4
#define TRUE 1
#define FALSE 0
struct Queue 
{
    int items[MaxQUEUE];
    int front;
    int rear;
};
void Initialize(struct Queue *cQ)
{
    cQ->front = MaxQUEUE  ;
    cQ->rear = MaxQUEUE ;

}
int IsEmpty(struct Queue *cQ)
{
   if(cQ->rear== cQ->front)
   return TRUE;
   else 
   return FALSE;
}
int EnQUEUE(struct Queue *cQ,int x){
if((cQ->rear + 1) % MaxQUEUE == cQ->front)
{
printf("queue overflows");
exit(1);
}
else
{
    cQ->rear = (cQ->rear + 1)% MaxQUEUE;
    cQ->items[cQ->rear] = x;
}
}
int DeQUEUE(struct Queue *cQ)
{
    int x;
    if(IsEmpty(*&cQ))
    {
    printf("queue underflow");
    exit(1);
    }
    else
    {
        cQ->front = (cQ->front + 1) % MaxQUEUE;
        x = cQ->items[cQ->front];
        return x;
    }
}

int main()
{
struct Queue cQ;
Initialize(&cQ);
EnQUEUE(&cQ,200);
EnQUEUE(&cQ,300);
EnQUEUE(&cQ,400);
EnQUEUE(&cQ,500);
int x = DeQUEUE(&cQ);
int y = DeQUEUE(&cQ);
int m= IsEmpty(&cQ);
printf("%d",m);
int z = DeQUEUE(&cQ);
int t = DeQUEUE(&cQ);
printf("%d\n",x);
printf("%d\n",y);
printf("%d\n",z);
printf("%d\n",t);
int k = IsEmpty(&cQ);
printf("%d",k);
return 0;
} 

